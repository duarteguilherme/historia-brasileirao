banco <- filter(banco, !is.na(resultado_real))
print(sum(banco$resultado_real==banco$resultado_estimado)/nrow(banco))
return(banco)
}
teste2 <- ve_quantas_acerta_unico(teste)
ve_quantas_acerta_unico <- function(banco) {
banco <- filter(banco, !is.na(prob_time_casa))
banco <- mutate(banco, resultado_real=ifelse(gols_casa==gols_fora, 1, ifelse(gols_casa>gols_fora, 2, 0)))
bbanco <- filter(banco, prob_time_casa > .5 | prob_time_fora > .5 | prob_empate > .5 )
bbanco <- mutate(bbanco, resultado_estimado=ifelse( (prob_time_casa > prob_time_fora) & (prob_time_casa > prob_empate),
2, ifelse(prob_time_fora > prob_empate, 0, 1)
))
bbanco <- filter(bbanco, !is.na(resultado_real))
bbbanco <- filter(banco, !(prob_time_casa > .5 | prob_time_fora > .5 | prob_empate > .5 ))
print(nrow(bbbanco))
print(sum(banco$resultado_real==banco$resultado_estimado)/nrow(banco))
return(bbbanco)
}
teste2 <- ve_quantas_acerta_unico(teste)
teste2
nrow(banco)
ve_quantas_acerta_unico <- function(banco) {
banco <- filter(banco, !is.na(prob_time_casa))
banco <- mutate(banco, resultado_real=ifelse(gols_casa==gols_fora, 1, ifelse(gols_casa>gols_fora, 2, 0)))
bbanco <- filter(banco, prob_time_casa > .5 | prob_time_fora > .5 | prob_empate > .5 )
bbanco <- mutate(bbanco, resultado_estimado=ifelse( (prob_time_casa > prob_time_fora) & (prob_time_casa > prob_empate),
2, ifelse(prob_time_fora > prob_empate, 0, 1)
))
bbanco <- filter(bbanco, !is.na(resultado_real))
bbbanco <- filter(banco, !(prob_time_casa > .5 | prob_time_fora > .5 | prob_empate > .5 ))
print(nrow(bbbanco))
print(sum(bbanco$resultado_real==bbanco$resultado_estimado)/nrow(bbanco))
print(nrow(bbanco))
return(bbbanco)
}
teste2 <- ve_quantas_acerta_unico(teste)
80/90 * .5222222 + 10/90*.70
ve_quantas_acerta_favorito <- function(banco) {
banco <- filter(banco, !is.na(prob_time_casa))
banco <- mutate(banco, resultado_real=ifelse(gols_casa==gols_fora, 1, ifelse(gols_casa>gols_fora, 2, 0)))
bbanco <- filter(banco, prob_time_casa > .8 | prob_time_fora > .8 | prob_empate > .8 )
bbanco <- mutate(bbanco, resultado_estimado=ifelse( (prob_time_casa > prob_time_fora) & (prob_time_casa > prob_empate),
2, ifelse(prob_time_fora > prob_empate, 0, 1)
))
bbanco <- filter(bbanco, !is.na(resultado_real))
bbbanco <- filter(banco, !(prob_time_casa > .5 | prob_time_fora > .5 | prob_empate > .5 ))
print(nrow(bbbanco))
print(sum(bbanco$resultado_real==bbanco$resultado_estimado)/nrow(bbanco))
print(nrow(bbanco))
return(bbbanco)
}
teste2 <- ve_quantas_acerta_favorito(teste)
4/6
5/6
ve_quantas_acerta_favorito <- function(banco) {
banco <- filter(banco, !is.na(prob_time_casa))
banco <- mutate(banco, resultado_real=ifelse(gols_casa==gols_fora, 1, ifelse(gols_casa>gols_fora, 2, 0)))
bbanco <- filter(banco, prob_time_casa > .7 | prob_time_fora > .7 | prob_empate > .7 )
bbanco <- mutate(bbanco, resultado_estimado=ifelse( (prob_time_casa > prob_time_fora) & (prob_time_casa > prob_empate),
2, ifelse(prob_time_fora > prob_empate, 0, 1)
))
bbanco <- filter(bbanco, !is.na(resultado_real))
print(sum(bbanco$resultado_real==bbanco$resultado_estimado)/nrow(bbanco))
print(nrow(bbanco))
}
teste2 <- ve_quantas_acerta_favorito(teste)
ve_quantas_acerta_favorito <- function(banco) {
banco <- filter(banco, !is.na(prob_time_casa))
banco <- mutate(banco, resultado_real=ifelse(gols_casa==gols_fora, 1, ifelse(gols_casa>gols_fora, 2, 0)))
bbanco <- filter(banco, prob_time_casa > .75 | prob_time_fora > .75 | prob_empate > .75 )
bbanco <- mutate(bbanco, resultado_estimado=ifelse( (prob_time_casa > prob_time_fora) & (prob_time_casa > prob_empate),
2, ifelse(prob_time_fora > prob_empate, 0, 1)
))
bbanco <- filter(bbanco, !is.na(resultado_real))
print(sum(bbanco$resultado_real==bbanco$resultado_estimado)/nrow(bbanco))
print(nrow(bbanco))
}
teste2 <- ve_quantas_acerta_favorito(teste)
ve_quantas_acerta_favorito <- function(banco) {
banco <- filter(banco, !is.na(prob_time_casa))
banco <- mutate(banco, resultado_real=ifelse(gols_casa==gols_fora, 1, ifelse(gols_casa>gols_fora, 2, 0)))
bbanco <- filter(banco, prob_time_casa > .8 | prob_time_fora > .8 | prob_empate > .8 )
bbanco <- mutate(bbanco, resultado_estimado=ifelse( (prob_time_casa > prob_time_fora) & (prob_time_casa > prob_empate),
2, ifelse(prob_time_fora > prob_empate, 0, 1)
))
bbanco <- filter(bbanco, !is.na(resultado_real))
print(sum(bbanco$resultado_real==bbanco$resultado_estimado)/nrow(bbanco))
print(nrow(bbanco))
}
teste2 <- ve_quantas_acerta_favorito(teste)
teste2
ve_quantas_acerta_favorito <- function(banco) {
banco <- filter(banco, !is.na(prob_time_casa))
banco <- mutate(banco, resultado_real=ifelse(gols_casa==gols_fora, 1, ifelse(gols_casa>gols_fora, 2, 0)))
bbanco <- filter(banco, prob_time_casa > .8 | prob_time_fora > .8 | prob_empate > .8 )
bbanco <- mutate(bbanco, resultado_estimado=ifelse( (prob_time_casa > prob_time_fora) & (prob_time_casa > prob_empate),
2, ifelse(prob_time_fora > prob_empate, 0, 1)
))
bbanco <- filter(bbanco, !is.na(resultado_real))
print(sum(bbanco$resultado_real==bbanco$resultado_estimado)/nrow(bbanco))
print(nrow(bbanco))
return(bbanco)
}
teste2
teste2 <- ve_quantas_acerta_favorito(teste)
teste2
modelo3 <- function(taxa_casa, taxa_fora, derrota_casa, derrota_fora) {
taxa_perder <- 1 - taxa_fora
taxa_media <- mean(c(taxa_perder, taxa_casa, taxa_casa))
return(c(taxa_media, (1-taxa_media)*.5, (1-taxa_media)*.5))
}
completa_tabela_prob(banco, modelo3)
completa_tabela_prob <- function(descompleto, model) {
descompleto$taxa_casa <- NA
descompleto$taxa_fora <- NA
descompleto$prob_time_casa <- NA
descompleto$prob_time_fora <- NA
descompleto$prob_empate <- NA
descompleto$erros <- NA
rodada_minima <- acha_rodada_minima(descompleto)
rodada_maxima <- tail(banco, 1)$rodada
for (rodadas in 20:rodada_minima) {
taxas <- acha_vitoria(descompleto, rodadas)
for ( l in (which(descompleto$rodada==rodadas)) ) {
var_casa <- taxas[taxas$times==(descompleto[l,]$time_casa),]$taxa_casa
var_fora <- taxas[taxas$times==(descompleto[l,]$time_fora),]$taxa_fora
derrota_casa <- taxas[taxas$times==(descompleto[l,]$time_casa),]$derrota_casa
derrota_fora <- taxas[taxas$times==(descompleto[l,]$time_fora),]$derrota_fora
resultado <- model(var_casa, var_fora, derrota_casa, derrota_fora)
descompleto[l,]$prob_time_casa <- resultado[1]
descompleto[l,]$prob_time_fora <- resultado[3]
descompleto[l,]$prob_empate <- resultado[2]
descompleto[l,]$erros <- (
( descompleto[l,]$vitoria_casa - resultado[1] )^2 +
( descompleto[l,]$vitoria_fora - resultado[3] )^2 +
( descompleto[l,]$draw - resultado[2] )^2
)
descompleto[l,]$erros <- descompleto[l,]$erros/3
}
# criar rotina pra definir winner, loser, vencedor, vence_casa, etc
}
print(mean(descompleto$erros, na.rm=TRUE))
return(descompleto)
}
caramba <- completa_tabela_prob(banco, modelo3)
ve_quantas_acerta_unico(caramba)
lala <- ve_quantas_acerta_unico(caramba)
modelo3 <- function(taxa_casa, taxa_fora, derrota_casa, derrota_fora) {
taxa_perder <- 1 - taxa_fora
taxa_media <- mean(c(taxa_perder, taxa_casa, taxa_perder))
return(c(taxa_media, (1-taxa_media)*.5, (1-taxa_media)*.5))
}
caramba <- completa_tabela_prob(banco, modelo3)
lala <- ve_quantas_acerta_unico(caramba)
banco <- read.csv('banco2014.csv', stringsAsFactors=FALSE)
banco <- clean_table(banco)
caramba <- completa_tabela_prob(banco, modelo3)
lala <- ve_quantas_acerta_unico(caramba)
banco <- read.csv('banco2013.csv', stringsAsFactors=FALSE)
banco <- clean_table(banco)
caramba <- completa_tabela_prob(banco, modelo3)
lala <- ve_quantas_acerta_unico(caramba)
banco <- read.csv('banco2012.csv', stringsAsFactors=FALSE)
banco <- clean_table(banco)
teste <- completa_tabela_prob(banco)
caramba <- completa_tabela_prob(banco, modelo3)
lala <- ve_quantas_acerta_unico(caramba)
completa_tabela_prob <- function(descompleto, model) {
descompleto$taxa_casa <- NA
descompleto$taxa_fora <- NA
descompleto$prob_time_casa <- NA
descompleto$prob_time_fora <- NA
descompleto$prob_empate <- NA
descompleto$erros <- NA
rodada_minima <- acha_rodada_minima(descompleto)
rodada_maxima <- tail(banco, 1)$rodada
for (rodadas in 20:rodada_minima) {
taxas <- acha_vitoria(descompleto, rodadas)
for ( l in (which(descompleto$rodada==rodadas)) ) {
var_casa <- taxas[taxas$times==(descompleto[l,]$time_casa),]$taxa_casa
var_fora <- taxas[taxas$times==(descompleto[l,]$time_fora),]$taxa_fora
derrota_casa <- taxas[taxas$times==(descompleto[l,]$time_casa),]$derrota_casa
derrota_fora <- taxas[taxas$times==(descompleto[l,]$time_fora),]$derrota_fora
resultado <- model(var_casa, var_fora, derrota_casa, derrota_fora)
descompleto[l,]$prob_time_casa <- resultado[1]
descompleto[l,]$prob_time_fora <- resultado[3]
descompleto[l,]$prob_empate <- resultado[2]
descompleto[l,]$erros <- (
( descompleto[l,]$vitoria_casa - resultado[1] )^2 +
( descompleto[l,]$vitoria_fora - resultado[3] )^2 +
( descompleto[l,]$draw - resultado[2] )^2
)
descompleto[l,]$erros <- descompleto[l,]$erros/3
}
# criar rotina pra definir winner, loser, vencedor, vence_casa, etc
}
print(mean(descompleto$erros, na.rm=TRUE))
return(descompleto)
}
banco <- read.csv('banco2012.csv', stringsAsFactors=FALSE)
banco <- clean_table(banco)
bbanco <- completa_tabela_prob(banco)
bbanco <- completa_tabela_prob(banco, modelo1)
str(bbanco)
acha_vitoria <- function(banco, rod) {
if ( rod <= 2 ) {
return(NA)
}
banco <- filter(banco, rodada<rod)
vitoria <- data.frame(times, stringsAsFactors=FALSE)
vitoria$taxa_casa <- NA
vitoria$taxa_fora <- NA
vitoria$derrota_casa <- NA
vitoria$derrota_fora <- NA
for (i in times) {
vitoria$taxa_casa[vitoria$times==i] <- length(which(banco$vence_casa==i))  /
length(which(banco$time_casa==i))
vitoria$taxa_fora[vitoria$times==i] <- length(which(banco$vence_fora==i)) /
length(which(banco$time_fora==i))
vitoria$derrota_casa[vitoria$times==i] <- length(which(banco$perde_casa==i))  /
length(which(banco$time_casa==i))
vitoria$derrota_fora[vitoria$times==i] <- length(which(banco$perde_fora==i)) /
length(which(banco$time_fora==i))
}
return(vitoria)
}
completa_tabela_prob <- function(descompleto, model) {
descompleto$taxa_casa <- NA
descompleto$taxa_fora <- NA
descompleto$prob_time_casa <- NA
descompleto$prob_time_fora <- NA
descompleto$prob_empate <- NA
descompleto$erros <- NA
descompleto[l,]$var_casa <- NA
descompleto[l,]$var_fora <- NA
descompleto[l,]$derrota_casa <- NA
descompleto[l,]$derrota_fora <- NA
rodada_minima <- acha_rodada_minima(descompleto)
rodada_maxima <- tail(banco, 1)$rodada
for (rodadas in 20:rodada_minima) {
taxas <- acha_vitoria(descompleto, rodadas)
for ( l in (which(descompleto$rodada==rodadas)) ) {
descompleto[l,]$var_casa <- taxas[taxas$times==(descompleto[l,]$time_casa),]$taxa_casa
descompleto[l,]$var_fora <- taxas[taxas$times==(descompleto[l,]$time_fora),]$taxa_fora
descompleto[l,]$derrota_casa <- taxas[taxas$times==(descompleto[l,]$time_casa),]$derrota_casa
descompleto[l,]$derrota_fora <- taxas[taxas$times==(descompleto[l,]$time_fora),]$derrota_fora
resultado <- model(descompleto[l,]$var_casa,
descompleto[l,]$var_fora,
descompleto[l,]$derrota_casa,
descompleto[l,]$derrota_fora)
descompleto[l,]$prob_time_casa <- resultado[1]
descompleto[l,]$prob_time_fora <- resultado[3]
descompleto[l,]$prob_empate <- resultado[2]
descompleto[l,]$erros <- (
( descompleto[l,]$vitoria_casa - resultado[1] )^2 +
( descompleto[l,]$vitoria_fora - resultado[3] )^2 +
( descompleto[l,]$draw - resultado[2] )^2
)
descompleto[l,]$erros <- descompleto[l,]$erros/3
}
# criar rotina pra definir winner, loser, vencedor, vence_casa, etc
}
print(mean(descompleto$erros, na.rm=TRUE))
return(descompleto)
}
bbanco <- completa_tabela_prob(banco, modelo1)
completa_tabela_prob <- function(descompleto, model) {
descompleto$taxa_casa <- NA
descompleto$taxa_fora <- NA
descompleto$prob_time_casa <- NA
descompleto$prob_time_fora <- NA
descompleto$prob_empate <- NA
descompleto$erros <- NA
descompleto$var_casa <- NA
descompleto$var_fora <- NA
descompleto$derrota_casa <- NA
descompleto$derrota_fora <- NA
rodada_minima <- acha_rodada_minima(descompleto)
rodada_maxima <- tail(banco, 1)$rodada
for (rodadas in 20:rodada_minima) {
taxas <- acha_vitoria(descompleto, rodadas)
for ( l in (which(descompleto$rodada==rodadas)) ) {
descompleto[l,]$var_casa <- taxas[taxas$times==(descompleto[l,]$time_casa),]$taxa_casa
descompleto[l,]$var_fora <- taxas[taxas$times==(descompleto[l,]$time_fora),]$taxa_fora
descompleto[l,]$derrota_casa <- taxas[taxas$times==(descompleto[l,]$time_casa),]$derrota_casa
descompleto[l,]$derrota_fora <- taxas[taxas$times==(descompleto[l,]$time_fora),]$derrota_fora
resultado <- model(descompleto[l,]$var_casa,
descompleto[l,]$var_fora,
descompleto[l,]$derrota_casa,
descompleto[l,]$derrota_fora)
descompleto[l,]$prob_time_casa <- resultado[1]
descompleto[l,]$prob_time_fora <- resultado[3]
descompleto[l,]$prob_empate <- resultado[2]
descompleto[l,]$erros <- (
( descompleto[l,]$vitoria_casa - resultado[1] )^2 +
( descompleto[l,]$vitoria_fora - resultado[3] )^2 +
( descompleto[l,]$draw - resultado[2] )^2
)
descompleto[l,]$erros <- descompleto[l,]$erros/3
}
# criar rotina pra definir winner, loser, vencedor, vence_casa, etc
}
print(mean(descompleto$erros, na.rm=TRUE))
return(descompleto)
}
bbanco <- completa_tabela_prob(banco, modelo1)
BANCO <- banco
descompleto <- banco
descompleto$taxa_casa <- NA
descompleto$taxa_fora <- NA
descompleto$prob_time_casa <- NA
descompleto$prob_time_fora <- NA
descompleto$prob_empate <- NA
descompleto$erros <- NA
descompleto$var_casa <- NA
descompleto$var_fora <- NA
descompleto$derrota_casa <- NA
descompleto$derrota_fora <- NA
rodada_minima <- acha_rodada_minima(descompleto)
rodada_maxima <- tail(banco, 1)$rodada
rodadas <- 29
rodadas <- 20
taxas <- acha_vitoria(descompleto, rodadas)
for ( l in (which(descompleto$rodada==rodadas)) ) {
descompleto[l,]$var_casa <- taxas[taxas$times==(descompleto[l,]$time_casa),]$taxa_casa
descompleto[l,]$var_fora <- taxas[taxas$times==(descompleto[l,]$time_fora),]$taxa_fora
descompleto[l,]$derrota_casa <- taxas[taxas$times==(descompleto[l,]$time_casa),]$derrota_casa
descompleto[l,]$derrota_fora <- taxas[taxas$times==(descompleto[l,]$time_fora),]$derrota_fora
resultado <- model(descompleto[l,]$var_casa,
descompleto[l,]$var_fora,
descompleto[l,]$derrota_casa,
descompleto[l,]$derrota_fora)
descompleto[l,]$prob_time_casa <- resultado[1]
descompleto[l,]$prob_time_fora <- resultado[3]
descompleto[l,]$prob_empate <- resultado[2]
descompleto[l,]$erros <- (
( descompleto[l,]$vitoria_casa - resultado[1] )^2 +
( descompleto[l,]$vitoria_fora - resultado[3] )^2 +
( descompleto[l,]$draw - resultado[2] )^2
)
descompleto[l,]$erros <- descompleto[l,]$erros/3
}
(which(descompleto$rodada==rodadas)
)
l <- 191
descompleto[l,]$var_casa <- taxas[taxas$times==(descompleto[l,]$time_casa),]$taxa_casa
descompleto[l,]$var_fora <- taxas[taxas$times==(descompleto[l,]$time_fora),]$taxa_fora
descompleto[l,]$derrota_casa <- taxas[taxas$times==(descompleto[l,]$time_casa),]$derrota_casa
descompleto[l,]$derrota_fora <- taxas[taxas$times==(descompleto[l,]$time_fora),]$derrota_fora
descompleto[l,]$var_fora <- taxas[taxas$times==(descompleto[l,]$time_fora),]$taxa_fora
taxas[taxas$times==(descompleto[l,]$time_fora),]$taxa_fora
taxas[taxas$times==(descompleto[l,]$time_casa),]$taxa_casa
taxas[taxas$times==(descompleto[l,]$time_fora),]$taxa_fora
head(taxas)
head(taxas, 30)
banco <- read.csv('banco2015.csv', stringsAsFactors=FALSE)
banco <- clean_table(banco)
bbanco <- completa_tabela_prob(banco, modelo1)
str(bbanco)
bbanco$var_casa
banco <- read.csv('banco2014.csv', stringsAsFactors=FALSE)
banco <- clean_table(banco)
bbanco <- completa_tabela_prob(banco, modelo1)
taxas <- acha_vitoria(descompleto, rodadas)
head(taxas, 30)
banco <- read.csv('banco2015.csv', stringsAsFactors=FALSE)
banco <- clean_table(banco)
bbanco <- completa_tabela_prob(banco, modelo1)
descompleto <- banco
taxas <- acha_vitoria(descompleto, rodadas)
head(taxas)
head(taxas, 40)
head(taxas, 60)
bbanco <- completa_tabela_prob(banco, modelo1)
banco <- read.csv('banco2014.csv', stringsAsFactors=FALSE)
banco <- clean_table(banco)
descompleto <- banco
taxas <- acha_vitoria(descompleto, rodadas)
head(taxas, 30)
rodadas
taxas <- acha_vitoria(descompleto, rodadas)
taxas
rodadas
taxas <- acha_vitoria(descompleto, 25)
head(taxas)
head(taxas, 30)
acha_vitoria <- function(banco, rod) {
if ( rod <= 2 ) {
return(NA)
}
times <- unique(c(unique(banco$time_casa),unique(banco$time_fora)))
banco <- filter(banco, rodada<rod)
vitoria <- data.frame(times, stringsAsFactors=FALSE)
vitoria$taxa_casa <- NA
vitoria$taxa_fora <- NA
vitoria$derrota_casa <- NA
vitoria$derrota_fora <- NA
for (i in times) {
vitoria$taxa_casa[vitoria$times==i] <- length(which(banco$vence_casa==i))  /
length(which(banco$time_casa==i))
vitoria$taxa_fora[vitoria$times==i] <- length(which(banco$vence_fora==i)) /
length(which(banco$time_fora==i))
vitoria$derrota_casa[vitoria$times==i] <- length(which(banco$perde_casa==i))  /
length(which(banco$time_casa==i))
vitoria$derrota_fora[vitoria$times==i] <- length(which(banco$perde_fora==i)) /
length(which(banco$time_fora==i))
}
return(vitoria)
}
banco <- read.csv('banco2014.csv', stringsAsFactors=FALSE)
banco <- clean_table(banco)
bbanco <- completa_tabela_prob(banco, modelo1)
str(bbanco)
prepara_para_regressao <- function(banco) {
banco <- filter(banco, !is.na(taxa_casa))
banco <- mutate(banco, resultado_real=ifelse(gols_casa==gols_fora, 1, ifelse(gols_casa>gols_fora, 2, 0)))
return(banco)
}
bbbanco <- prepara_para_regressao(bbanco)
bbbanco
prepara_para_regressao <- function(banco) {
banco <- filter(banco, !is.na(var_casa))
banco <- mutate(banco, resultado_real=ifelse(gols_casa==gols_fora, 1, ifelse(gols_casa>gols_fora, 2, 0)))
return(banco)
}
bbbanco <- prepara_para_regressao(bbanco)
str(bbbanco)
bbbanco$resultado_real
bbbanco$var_casa
require(foreign)
require(nnet)
?mutinomial
?multinomial
?multinom
teste <- multinom(resultado_real ~ var_casa + var_fora, data=bbbanco)
teste
summary(teste)
teste <- multinom(resultado_real ~ var_casa + derrota_fora, data=bbbanco)
teste
summary(teste)
modelo7 <- function(taxa_casa, taxa_fora, derrota_casa, derrota_fora) {
taxa_perder <- 1 -  derrota_fora
taxa_media <- (2.5*taxa_perder + 1*taxa_casa)/3.5
return(c(taxa_media, (1-taxa_media)*.5, (1-taxa_media)*.5))
}
banco <- read.csv('banco2015.csv', stringsAsFactors=FALSE)
banco <- clean_table(banco)
bbanco <- completa_tabela_prob(banco, modelo7)
ve_quantas_acerta_unico(banco)
ve_quantas_acerta_unico(bbanco)
install.packages('PlayerRatings')
library(PlayerRatings)
data(afloods)
data(aflodds)
str(aflodds)
table(aflodds$Score)
setwd('~/historia_brasileirao/')
banco <- read.csv('brasileiros.csv', stringsAsFactors=FALSE)
str(banco)
library(tidyr)
library(dplyr)
b2014 <- read.csv('banco2014.csv', stringsAsFactors=FALSE)
str(banco2014)
str(b2014)
?unite
toupper("Dunha")
tolower("Dunha")
transforma_banco <- function(db, ano) { #Função para juntar banco de 2015
db <- select(db, data1=data, time_casa, gols_casa, time_casa_time_fora)
db$data2 = paste0("/", ano)
db <- unite(db, data, data1, data2, sep="")
db$time_casa <- tolower(db$time_casa)
db$time_fora <- tolower(db$time_fora)
db$time_casa <- iconv(db$time_casa, to="ascii//translit")
db$time_fora <- iconv(db$time_fora, to="ascii//translit")
db$time_casa <- gsub(" ", "-", db$time_casa)
db$time_fora <- gsub(" ", "-", db$time_fora)
return(db)
}
transforma_banco <- function(db, ano) { #Função para juntar banco de 2015
db <- select(db, data1=data, time_casa, gols_casa, time_casa_time_fora)
db$ano <- ano
db <- unite(db, data, data1, data2, sep="")
db$time_casa <- tolower(db$time_casa)
db$time_fora <- tolower(db$time_fora)
db$time_casa <- iconv(db$time_casa, to="ascii//translit")
db$time_fora <- iconv(db$time_fora, to="ascii//translit")
db$time_casa <- gsub(" ", "-", db$time_casa)
db$time_fora <- gsub(" ", "-", db$time_fora)
return(db)
}
b2014 <- transforma_banco(b2014, 2014)
transforma_banco <- function(db, ano) { #Função para juntar banco de 2015
db <- select(db, data1=data, time_casa, gols_casa, time_fora,gols_fora)
db$ano <- ano
db <- unite(db, data, data1, data2, sep="")
db$time_casa <- tolower(db$time_casa)
db$time_fora <- tolower(db$time_fora)
db$time_casa <- iconv(db$time_casa, to="ascii//translit")
db$time_fora <- iconv(db$time_fora, to="ascii//translit")
db$time_casa <- gsub(" ", "-", db$time_casa)
db$time_fora <- gsub(" ", "-", db$time_fora)
return(db)
}
b2014 <- transforma_banco(b2014, 2014)
str(b2014)
teste <- select(b2014, data1=data)
teste <- select(b2014, data)
library(dplyr)
teste <- select(b2014, data)
?select
teste <- select(b2014, -data)
